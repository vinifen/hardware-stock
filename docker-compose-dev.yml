services:
  db:
    container_name: db
    networks:
      - db-network
    build: 
      context: ./db
      dockerfile: Dockerfile
      args:
        DB_USER: ${DB_USER}
        DB_PASSWORD: ${DB_PASSWORD}
        DB_NAME: ${DB_NAME}

  backend:
    container_name: backend
    image: php:8.3.18RC1-fpm-alpine3.21
    working_dir: /backend
    volumes:
      - ./backend:/backend
    env_file:
      - .env
    environment:
      - ALLOWED_ORIGIN=${WEB_SCHEME_DEV}://${WEB_DOMAIN_DEV}:${WEB_PORT_DEV}
    entrypoint: >
      sh -c "
        [ -d vendor ] && rm -rf vendor || echo 'backend vendor does not exist';
        apk add --no-cache bash curl git unzip &&
        curl -sS https://getcomposer.org/installer | php -- --install-dir=/usr/local/bin --filename=composer &&
        composer --version &&
        composer install && 
        php -S 0.0.0.0:1122
      "
    networks:
      - hardware-stock-network
      - db-network

  frontend:
    container_name: frontend
    image: node:current-alpine3.21
    working_dir: /frontend
    volumes:
      - ./frontend:/frontend
    depends_on:
      - backend
    environment:
      - WEB_BACK_URL=${WEB_SCHEME_DEV}://${WEB_DOMAIN_DEV}:${WEB_PORT_DEV}/api/ 
    entrypoint: >
      sh -c "
        chmod +x /frontend/configureFrontend.sh &&
        /frontend/configureFrontend.sh && 
        ng serve --host 0.0.0.0 --disable-host-check
      "
    networks:
      - hardware-stock-network

  web:
    container_name: web
    image: nginx:alpine3.21-perl
    volumes:
    - ./web/entrypoint.sh:/web/entrypoint.sh 
    - ./web/dev/nginx.conf:/web/nginx.conf
    networks:
      - hardware-stock-network
    environment:
      - WEB_DOMAIN=${WEB_DOMAIN_DEV}
    entrypoint: > 
      sh -c  "ls -la && chmod +x ./web/entrypoint.sh && /web/entrypoint.sh && ls -la"
    ports:
      # - "${WEB_PORT_DEV}:443"
      - "${WEB_PORT_DEV}:80"


networks:
  hardware-stock-network:
    driver: bridge
  db-network:
    driver: bridge
